# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 8080, host: 8080 # zeppelin notebook
  config.vm.network "forwarded_port", guest: 4040, host: 4040 # spark UI
  config.vm.network "forwarded_port", guest: 22, host: 3022
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
  
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
  end
 
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    set -euxo pipefail

    VAGRANT_HOME=/home/vagrant

    sudo apt-get update
    sudo apt-get install -y \
      default-jdk \
      scala \
      git \
      sbt

    # download and install spark
    SPARK_VERSION=spark-2.3.0
    SPARK_TARBALL_FILENAME=$SPARK_VERSION-bin-hadoop2.7.tgz
    SPARK_DOWNLOAD_URL=http://www-eu.apache.org/dist/spark/$SPARK_VERSION/$SPARK_TARBALL_FILENAME
 
    if [[ ! -d /usr/local/spark ]]; then
      curl -SO $SPARK_DOWNLOAD_URL
      tar xvf $SPARK_TARBALL_FILENAME
      rm $SPARK_TARBALL_FILENAME

      SPARK_DIR=$(echo $SPARK_TARBALL_FILENAME | sed -e 's/\.tgz//g')
      mkdir /usr/local/spark
      mv $SPARK_DIR/* /usr/local/spark/
      rm -rf $SPARK_DIR
    fi

    echo "export PATH=$PATH:/usr/local/spark/bin" >> $VAGRANT_HOME/.bashrc

    # download and install apache zeppelin
    #ZEPPELIN_VERSION=zeppelin-0.7.3
    #ZEPPELIN_TARBALL_FILENAME=$ZEPPELIN_VERSION-bin-netinist.tgz
    #ZEPPELIN_DOWNLOAD_URL=http://www-us.apache.org/dist/zeppelin/ZEPPELIN_VERSION/$ZEPPELIN_TARBALL_FILENAME

    #curl -SO $ZEPPELIN_DOWNLOAD_URL
    #tar xvf $ZEPPELIN_TARBALL_FILENAME
    #rm $ZEPPELIN_TARBALL_FILENAME

    #ZEPPELIN_DIR=$(echo $ZEPPELIN_TARBALL_FILENAME | sed -e 's/\.tar//g')
    #mkdir /usr/local/zeppelin
    #mv $ZEPPELIN_DIR/* /usr/local/zeppelin
    #rm -rf $ZEPPELIN_DIR

    git clone https://github.com/davidshere/configs.git 

   SHELL
end
